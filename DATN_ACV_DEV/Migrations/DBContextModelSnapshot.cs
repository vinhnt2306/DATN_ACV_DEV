// <auto-generated />
using System;
using DATN_ACV_DEV.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATN_ACV_DEV.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("AccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("tb_Account", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbAddressDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("accountId");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("districtId");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("districtName");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isDelete");

                    b.Property<int>("ProviceId")
                        .HasColumnType("int")
                        .HasColumnName("proviceId");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provinceName");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("receiverName");

                    b.Property<string>("ReceiverPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("receiverPhone");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("wardId");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("wardName");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("tb_AddressDelivery", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountID");

                    b.Property<bool?>("CartAdmin")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_Cart", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CartID");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("tb_CartDetail", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_Category", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbColor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tb_Color", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("GroupCustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupCustomerID");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("YearOfBirth")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("GroupCustomerId");

                    b.ToTable("tb_Customer", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCustomerVoucher", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<string>("VoucherCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VoucherID");

                    b.HasKey("CustomerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("tb_CustomerVoucher", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbFuntion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("int");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tb_Funtions", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbFuntionForPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("FuntionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FuntionID");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PermissionID");

                    b.HasKey("Id")
                        .HasName("PK_FuntionForPermission");

                    b.HasIndex("FuntionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("tb_FuntionForPermission", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbGroupCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool?>("IsDelete")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("MaxPoint")
                        .HasColumnType("int");

                    b.Property<int>("MinPoint")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("tb_GroupCustomer", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("InAcitve")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tb_Image", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("InputDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDelete")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int>("QuantityProduct")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SupplierID");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("tb_Invoice", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbInvoiceDetail", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InvoiceID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("tb_InvoiceDetail", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tb_Material", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountID");

                    b.Property<string>("AddressCustomer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AddressDeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountShip")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderCodeGhn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrderCodeGHN");

                    b.Property<bool?>("OrderCounter")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentMethodID");

                    b.Property<string>("PhoneNumberCustomer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasionCancel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("TotalAmountDiscount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tb_Order", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderID");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("tb_OrderDetail", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbOrderHistories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("IdBoss")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdKhachHang")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("TbOrderHistories");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbPaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("InActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tb_PaymentMethod", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_Permission", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_Policy", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<bool?>("IsDelete")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Length")
                        .HasColumnType("int")
                        .HasColumnName("length");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("PriceNet")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Vat")
                        .HasColumnType("bit")
                        .HasColumnName("VAT");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int")
                        .HasColumnName("weight");

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("PK_tb_Produst");

                    b.HasIndex("CategoryId");

                    b.ToTable("tb_Products", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryID");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PolicyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PolicyID");

                    b.Property<int>("PrecentDiscount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.ToTable("tb_Promotion", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryID");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_Properties", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("InActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDelete")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProvideProducst")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_Supplier", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("InActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Position")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("tb_User", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbUserFuntion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("FuntionForPermissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FuntionForPermissionID");

                    b.Property<Guid>("GroupUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupUserID");

                    b.HasKey("Id");

                    b.HasIndex("FuntionForPermissionId");

                    b.ToTable("tb_UserFuntion", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbUserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_UserGroup", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("GroupCustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupCustomerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_Voucher", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Surplus")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("tb_Wallet", (string)null);
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbAccount", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbCustomer", "Customer")
                        .WithMany("TbAccounts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_Account_tb_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbAddressDelivery", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbAccount", "Account")
                        .WithMany("TbAddressDeliveries")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_AddressDelivery_tb_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCartDetail", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbCart", "Cart")
                        .WithMany("TbCartDetails")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_tb_CartDetail_tb_Cart");

                    b.HasOne("DATN_ACV_DEV.Entity.TbProduct", "Product")
                        .WithMany("TbCartDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_tb_CartDetail_tb_Produst");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCustomer", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbGroupCustomer", "GroupCustomer")
                        .WithMany("TbCustomers")
                        .HasForeignKey("GroupCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_Customer_tb_GroupCustomer");

                    b.Navigation("GroupCustomer");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCustomerVoucher", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbCustomer", "Customer")
                        .WithOne("TbCustomerVoucher")
                        .HasForeignKey("DATN_ACV_DEV.Entity.TbCustomerVoucher", "CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_CustomerVoucher_tb_Customer");

                    b.HasOne("DATN_ACV_DEV.Entity.TbVoucher", "Voucher")
                        .WithMany("TbCustomerVouchers")
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_CustomerVoucher_tb_Voucher");

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbFuntionForPermission", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbFuntion", "Funtion")
                        .WithMany("TbFuntionForPermissions")
                        .HasForeignKey("FuntionId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_FuntionForPermission_tb_Funtions");

                    b.HasOne("DATN_ACV_DEV.Entity.TbPermission", "Permission")
                        .WithMany("TbFuntionForPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_FuntionForPermission_tb_Permission");

                    b.Navigation("Funtion");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbInvoice", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbSupplier", "Supplier")
                        .WithMany("TbInvoices")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_Invoice_tb_Supplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbInvoiceDetail", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbInvoice", "Invoice")
                        .WithOne("TbInvoiceDetail")
                        .HasForeignKey("DATN_ACV_DEV.Entity.TbInvoiceDetail", "InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_InvoiceDetail_tb_Invoice");

                    b.HasOne("DATN_ACV_DEV.Entity.TbProduct", "Product")
                        .WithMany("TbInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_InvoiceDetail_tb_Produst");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbOrderDetail", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbOrder", "Order")
                        .WithMany("TbOrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_OrderDetail_tb_Order");

                    b.HasOne("DATN_ACV_DEV.Entity.TbProduct", "Product")
                        .WithMany("TbOrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_OrderDetail_tb_Produst");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbOrderHistories", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbOrder", "Order")
                        .WithMany("TbOrderHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbProduct", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbCategory", "Category")
                        .WithMany("TbProducts")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_Produst_tb_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbPromotion", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbPolicy", "Policy")
                        .WithMany("TbPromotions")
                        .HasForeignKey("PolicyId")
                        .HasConstraintName("FK_tb_Promotion_tb_Policy");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbUser", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbUserGroup", "UserGroup")
                        .WithMany("TbUsers")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK_tb_User_tb_UserGroup");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbUserFuntion", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbFuntionForPermission", "FuntionForPermission")
                        .WithMany("TbUserFuntions")
                        .HasForeignKey("FuntionForPermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_UserFuntion_tb_FuntionForPermission");

                    b.Navigation("FuntionForPermission");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbWallet", b =>
                {
                    b.HasOne("DATN_ACV_DEV.Entity.TbAccount", "Account")
                        .WithMany("TbWallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tb_Wallet_tb_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbAccount", b =>
                {
                    b.Navigation("TbAddressDeliveries");

                    b.Navigation("TbWallets");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCart", b =>
                {
                    b.Navigation("TbCartDetails");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCategory", b =>
                {
                    b.Navigation("TbProducts");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbCustomer", b =>
                {
                    b.Navigation("TbAccounts");

                    b.Navigation("TbCustomerVoucher");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbFuntion", b =>
                {
                    b.Navigation("TbFuntionForPermissions");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbFuntionForPermission", b =>
                {
                    b.Navigation("TbUserFuntions");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbGroupCustomer", b =>
                {
                    b.Navigation("TbCustomers");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbInvoice", b =>
                {
                    b.Navigation("TbInvoiceDetail");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbOrder", b =>
                {
                    b.Navigation("TbOrderDetails");

                    b.Navigation("TbOrderHistories");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbPermission", b =>
                {
                    b.Navigation("TbFuntionForPermissions");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbPolicy", b =>
                {
                    b.Navigation("TbPromotions");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbProduct", b =>
                {
                    b.Navigation("TbCartDetails");

                    b.Navigation("TbInvoiceDetails");

                    b.Navigation("TbOrderDetails");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbSupplier", b =>
                {
                    b.Navigation("TbInvoices");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbUserGroup", b =>
                {
                    b.Navigation("TbUsers");
                });

            modelBuilder.Entity("DATN_ACV_DEV.Entity.TbVoucher", b =>
                {
                    b.Navigation("TbCustomerVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
